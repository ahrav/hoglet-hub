//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for OperationStatus.
const (
	Cancelled  OperationStatus = "cancelled"
	Completed  OperationStatus = "completed"
	Failed     OperationStatus = "failed"
	InProgress OperationStatus = "in_progress"
	Pending    OperationStatus = "pending"
)

// Defines values for Region.
const (
	Eu1 Region = "eu1"
	Eu2 Region = "eu2"
	Eu3 Region = "eu3"
	Eu4 Region = "eu4"
	Us1 Region = "us1"
	Us2 Region = "us2"
	Us3 Region = "us3"
	Us4 Region = "us4"
)

// Defines values for TenantBaseTier.
const (
	TenantBaseTierEnterprise TenantBaseTier = "enterprise"
	TenantBaseTierFree       TenantBaseTier = "free"
	TenantBaseTierPro        TenantBaseTier = "pro"
)

// Defines values for TenantCreateTier.
const (
	TenantCreateTierEnterprise TenantCreateTier = "enterprise"
	TenantCreateTierFree       TenantCreateTier = "free"
	TenantCreateTierPro        TenantCreateTier = "pro"
)

// AsyncOperation defines model for AsyncOperation.
type AsyncOperation struct {
	// Links HATEOAS links to related resources
	Links Links `json:"_links"`

	// OperationId ID of the created async operation
	OperationId int64 `json:"operation_id"`

	// Status Status of an asynchronous operation
	Status OperationStatus `json:"status"`

	// TenantId Associated tenant ID if applicable
	TenantId *int64 `json:"tenant_id"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Links HATEOAS links to related resources
type Links map[string]string

// OperationResponse defines model for OperationResponse.
type OperationResponse struct {
	// Links HATEOAS links to related resources
	Links Links `json:"_links"`

	// CompletedAt When operation finished
	CompletedAt *time.Time `json:"completed_at"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy Email of user who initiated this operation
	CreatedBy *openapi_types.Email `json:"created_by,omitempty"`

	// ErrorMessage Error details if operation failed
	ErrorMessage *string `json:"error_message"`

	// Id Unique operation ID
	Id int64 `json:"id"`

	// OperationType Type of operation
	OperationType string `json:"operation_type"`

	// Parameters Input parameters for the operation
	Parameters *map[string]interface{} `json:"parameters,omitempty"`

	// Result Result data from completed operation
	Result *map[string]interface{} `json:"result,omitempty"`

	// StartedAt When operation execution began
	StartedAt *time.Time `json:"started_at"`

	// Status Status of an asynchronous operation
	Status OperationStatus `json:"status"`

	// TenantId Associated tenant ID if applicable
	TenantId *int64 `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// OperationStatus Status of an asynchronous operation
type OperationStatus string

// Region Deployment regions across GCP
type Region string

// TenantBase defines model for TenantBase.
type TenantBase struct {
	// Name Unique identifier for the tenant (lowercase letters, numbers, hyphens)
	Name string `json:"name"`

	// Region Deployment regions across GCP
	Region Region          `json:"region"`
	Tier   *TenantBaseTier `json:"tier,omitempty"`
}

// TenantBaseTier defines model for TenantBase.Tier.
type TenantBaseTier string

// TenantCreate defines model for TenantCreate.
type TenantCreate struct {
	// IsolationGroupId Optional isolation group ID if tenant should be isolated
	IsolationGroupId *int64 `json:"isolation_group_id"`

	// Name Unique identifier for the tenant (lowercase letters, numbers, hyphens)
	Name string `json:"name"`

	// Region Deployment regions across GCP
	Region Region            `json:"region"`
	Tier   *TenantCreateTier `json:"tier,omitempty"`
}

// TenantCreateTier defines model for TenantCreate.Tier.
type TenantCreateTier string

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody = TenantCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get operation details
	// (GET /operations/{operation_id})
	GetOperation(w http.ResponseWriter, r *http.Request, operationId int64)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(w http.ResponseWriter, r *http.Request)
	// Delete tenant
	// (DELETE /tenants/{tenant_id})
	DeleteTenant(w http.ResponseWriter, r *http.Request, tenantId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOperation operation middleware
func (siw *ServerInterfaceWrapper) GetOperation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "operation_id" -------------
	var operationId int64

	err = runtime.BindStyledParameterWithOptions("simple", "operation_id", r.PathValue("operation_id"), &operationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "operation_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOperation(w, r, operationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTenant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTenant operation middleware
func (siw *ServerInterfaceWrapper) DeleteTenant(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tenant_id" -------------
	var tenantId int64

	err = runtime.BindStyledParameterWithOptions("simple", "tenant_id", r.PathValue("tenant_id"), &tenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenant_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTenant(w, r, tenantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/operations/{operation_id}", wrapper.GetOperation)
	m.HandleFunc("POST "+options.BaseURL+"/tenants", wrapper.CreateTenant)
	m.HandleFunc("DELETE "+options.BaseURL+"/tenants/{tenant_id}", wrapper.DeleteTenant)

	return m
}

type GetOperationRequestObject struct {
	OperationId int64 `json:"operation_id"`
}

type GetOperationResponseObject interface {
	VisitGetOperationResponse(w http.ResponseWriter) error
}

type GetOperation200JSONResponse OperationResponse

func (response GetOperation200JSONResponse) VisitGetOperationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOperation401Response struct {
}

func (response GetOperation401Response) VisitGetOperationResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetOperation404JSONResponse Error

func (response GetOperation404JSONResponse) VisitGetOperationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOperation500JSONResponse Error

func (response GetOperation500JSONResponse) VisitGetOperationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTenantRequestObject struct {
	Body *CreateTenantJSONRequestBody
}

type CreateTenantResponseObject interface {
	VisitCreateTenantResponse(w http.ResponseWriter) error
}

type CreateTenant202JSONResponse struct {
	// Links HATEOAS links to related resources
	Links Links  `json:"_links"`
	Name  string `json:"name"`

	// OperationId ID of the created async operation
	OperationId int64 `json:"operation_id"`

	// Status Status of an asynchronous operation
	Status   OperationStatus `json:"status"`
	TenantId int64           `json:"tenant_id"`
}

func (response CreateTenant202JSONResponse) VisitCreateTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateTenant400JSONResponse Error

func (response CreateTenant400JSONResponse) VisitCreateTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTenant401Response struct {
}

func (response CreateTenant401Response) VisitCreateTenantResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTenant409JSONResponse Error

func (response CreateTenant409JSONResponse) VisitCreateTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateTenant500JSONResponse Error

func (response CreateTenant500JSONResponse) VisitCreateTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTenantRequestObject struct {
	TenantId int64 `json:"tenant_id"`
}

type DeleteTenantResponseObject interface {
	VisitDeleteTenantResponse(w http.ResponseWriter) error
}

type DeleteTenant202JSONResponse AsyncOperation

func (response DeleteTenant202JSONResponse) VisitDeleteTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTenant401Response struct {
}

func (response DeleteTenant401Response) VisitDeleteTenantResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTenant404JSONResponse Error

func (response DeleteTenant404JSONResponse) VisitDeleteTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTenant409JSONResponse Error

func (response DeleteTenant409JSONResponse) VisitDeleteTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTenant500JSONResponse Error

func (response DeleteTenant500JSONResponse) VisitDeleteTenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get operation details
	// (GET /operations/{operation_id})
	GetOperation(ctx context.Context, request GetOperationRequestObject) (GetOperationResponseObject, error)
	// Create a new tenant
	// (POST /tenants)
	CreateTenant(ctx context.Context, request CreateTenantRequestObject) (CreateTenantResponseObject, error)
	// Delete tenant
	// (DELETE /tenants/{tenant_id})
	DeleteTenant(ctx context.Context, request DeleteTenantRequestObject) (DeleteTenantResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetOperation operation middleware
func (sh *strictHandler) GetOperation(w http.ResponseWriter, r *http.Request, operationId int64) {
	var request GetOperationRequestObject

	request.OperationId = operationId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperation(ctx, request.(GetOperationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOperationResponseObject); ok {
		if err := validResponse.VisitGetOperationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTenant operation middleware
func (sh *strictHandler) CreateTenant(w http.ResponseWriter, r *http.Request) {
	var request CreateTenantRequestObject

	var body CreateTenantJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTenant(ctx, request.(CreateTenantRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTenant")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTenantResponseObject); ok {
		if err := validResponse.VisitCreateTenantResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTenant operation middleware
func (sh *strictHandler) DeleteTenant(w http.ResponseWriter, r *http.Request, tenantId int64) {
	var request DeleteTenantRequestObject

	request.TenantId = tenantId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTenant(ctx, request.(DeleteTenantRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTenant")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTenantResponseObject); ok {
		if err := validResponse.VisitDeleteTenantResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
