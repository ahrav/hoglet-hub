// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type AuditStatus string

const (
	AuditStatusSuccess AuditStatus = "success"
	AuditStatusFailure AuditStatus = "failure"
)

func (e *AuditStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuditStatus(s)
	case string:
		*e = AuditStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuditStatus: %T", src)
	}
	return nil
}

type NullAuditStatus struct {
	AuditStatus AuditStatus
	Valid       bool // Valid is true if AuditStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuditStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AuditStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuditStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuditStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuditStatus), nil
}

type DatabaseNodeStatus string

const (
	DatabaseNodeStatusActive         DatabaseNodeStatus = "active"
	DatabaseNodeStatusDraining       DatabaseNodeStatus = "draining"
	DatabaseNodeStatusMaintenance    DatabaseNodeStatus = "maintenance"
	DatabaseNodeStatusOffline        DatabaseNodeStatus = "offline"
	DatabaseNodeStatusProvisioning   DatabaseNodeStatus = "provisioning"
	DatabaseNodeStatusDecommissioned DatabaseNodeStatus = "decommissioned"
)

func (e *DatabaseNodeStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DatabaseNodeStatus(s)
	case string:
		*e = DatabaseNodeStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DatabaseNodeStatus: %T", src)
	}
	return nil
}

type NullDatabaseNodeStatus struct {
	DatabaseNodeStatus DatabaseNodeStatus
	Valid              bool // Valid is true if DatabaseNodeStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDatabaseNodeStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DatabaseNodeStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DatabaseNodeStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDatabaseNodeStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DatabaseNodeStatus), nil
}

type NodeType string

const (
	NodeTypeStandard    NodeType = "standard"
	NodeTypeHighMemory  NodeType = "high-memory"
	NodeTypeIsolated    NodeType = "isolated"
	NodeTypeCoordinator NodeType = "coordinator"
)

func (e *NodeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NodeType(s)
	case string:
		*e = NodeType(s)
	default:
		return fmt.Errorf("unsupported scan type for NodeType: %T", src)
	}
	return nil
}

type NullNodeType struct {
	NodeType NodeType
	Valid    bool // Valid is true if NodeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNodeType) Scan(value interface{}) error {
	if value == nil {
		ns.NodeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NodeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNodeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NodeType), nil
}

type OperationStatus string

const (
	OperationStatusPending    OperationStatus = "pending"
	OperationStatusInProgress OperationStatus = "in_progress"
	OperationStatusCompleted  OperationStatus = "completed"
	OperationStatusFailed     OperationStatus = "failed"
	OperationStatusCancelled  OperationStatus = "cancelled"
)

func (e *OperationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationStatus(s)
	case string:
		*e = OperationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationStatus: %T", src)
	}
	return nil
}

type NullOperationStatus struct {
	OperationStatus OperationStatus
	Valid           bool // Valid is true if OperationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOperationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OperationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OperationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOperationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OperationStatus), nil
}

type RegionType string

const (
	RegionTypeUs1 RegionType = "us1"
	RegionTypeUs2 RegionType = "us2"
	RegionTypeUs3 RegionType = "us3"
	RegionTypeUs4 RegionType = "us4"
	RegionTypeEu1 RegionType = "eu1"
	RegionTypeEu2 RegionType = "eu2"
	RegionTypeEu3 RegionType = "eu3"
	RegionTypeEu4 RegionType = "eu4"
)

func (e *RegionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RegionType(s)
	case string:
		*e = RegionType(s)
	default:
		return fmt.Errorf("unsupported scan type for RegionType: %T", src)
	}
	return nil
}

type NullRegionType struct {
	RegionType RegionType
	Valid      bool // Valid is true if RegionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRegionType) Scan(value interface{}) error {
	if value == nil {
		ns.RegionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RegionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRegionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RegionType), nil
}

type ResourceStatus string

const (
	ResourceStatusProvisioning ResourceStatus = "provisioning"
	ResourceStatusActive       ResourceStatus = "active"
	ResourceStatusError        ResourceStatus = "error"
	ResourceStatusDeleting     ResourceStatus = "deleting"
	ResourceStatusSuspended    ResourceStatus = "suspended"
)

func (e *ResourceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceStatus(s)
	case string:
		*e = ResourceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceStatus: %T", src)
	}
	return nil
}

type NullResourceStatus struct {
	ResourceStatus ResourceStatus
	Valid          bool // Valid is true if ResourceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceStatus), nil
}

type TenantStatus string

const (
	TenantStatusProvisioning TenantStatus = "provisioning"
	TenantStatusActive       TenantStatus = "active"
	TenantStatusSuspended    TenantStatus = "suspended"
	TenantStatusError        TenantStatus = "error"
	TenantStatusDeleting     TenantStatus = "deleting"
	TenantStatusIsolated     TenantStatus = "isolated"
)

func (e *TenantStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TenantStatus(s)
	case string:
		*e = TenantStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TenantStatus: %T", src)
	}
	return nil
}

type NullTenantStatus struct {
	TenantStatus TenantStatus
	Valid        bool // Valid is true if TenantStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTenantStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TenantStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TenantStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTenantStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TenantStatus), nil
}

type AuditLog struct {
	ID           int64
	Action       string
	Timestamp    pgtype.Timestamptz
	Status       AuditStatus
	Actor        string
	ActorIp      *netip.Addr
	TenantID     pgtype.Int8
	ResourceID   pgtype.Int8
	OperationID  pgtype.Int8
	Details      []byte
	ErrorDetails pgtype.Text
	DurationMs   pgtype.Int4
}

type DatabaseNode struct {
	ID                        int64
	Hostname                  string
	Port                      int32
	Region                    RegionType
	NodeType                  NodeType
	Status                    DatabaseNodeStatus
	TenantCount               pgtype.Int4
	MaxTenants                pgtype.Int4
	CurrentUtilizationPercent pgtype.Int4
	CitusMetadata             []byte
	CreatedAt                 pgtype.Timestamptz
	UpdatedAt                 pgtype.Timestamptz
	CreatedBy                 string
}

type IsolationGroup struct {
	ID                int64
	Name              string
	Region            RegionType
	CitusColocationID pgtype.Int4
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	CreatedBy         string
}

type Operation struct {
	ID            int64
	TenantID      pgtype.Int8
	OperationType string
	Status        OperationStatus
	Parameters    []byte
	Result        []byte
	ErrorMessage  pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	StartedAt     pgtype.Timestamptz
	CompletedAt   pgtype.Timestamptz
	CreatedBy     string
}

type Resource struct {
	ID                   int64
	TenantID             int64
	ResourceType         string
	ResourceName         string
	ResourceID           pgtype.Text
	Region               RegionType
	ProjectID            string
	Status               ResourceStatus
	Metadata             []byte
	CreatedAt            pgtype.Timestamptz
	UpdatedAt            pgtype.Timestamptz
	CreatedByOperationID pgtype.Int8
}

type ResourceCount struct {
	ResourceType string
	ProjectID    string
	Region       RegionType
	Count        int32
	LastUpdated  pgtype.Timestamptz
}

type Tenant struct {
	ID                  int64
	Name                string
	Region              RegionType
	Status              TenantStatus
	Tier                string
	DatabaseSchema      pgtype.Text
	IsIsolated          pgtype.Bool
	GkeClusterName      pgtype.Text
	KubernetesNamespace pgtype.Text
	IsolationGroupID    pgtype.Int8
	PrimaryNodeID       pgtype.Int8
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	CreatedBy           string
}
